/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package Interface.User;

import Business.Enterprise;
import Business.FinancialAccount.FinanceAccount;
import Business.FinancialAccount.FinanceAccountDirectory;
import Business.Network.Network;
import Business.Order.MasterOrderCatalog;
import Business.Order.Order;
import Business.Order.OrderItem;
import Business.Organization.AdvertiserOrganization;
import Business.Organization.Organization;
import Business.Organization.SupplierOrganization;
import Business.UserAccount.UserAccount;
import java.awt.CardLayout;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Hema
 */
public class ViewCartJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ViewCartJPanel
     */
    JPanel container;
    Order order;
    MasterOrderCatalog masterOrderCatalog;
    UserAccount userAccount;
    FinanceAccountDirectory financeAccountDirectory;
    Enterprise enterprise;
    Boolean flag = true;
    public ViewCartJPanel(JPanel container, Order order, UserAccount userAccount, MasterOrderCatalog masterOrderCatalog, FinanceAccountDirectory financeAccountDirectory, Enterprise enterprise) {
        initComponents();
        this.container = container;
        this.order = order;
        this.masterOrderCatalog = masterOrderCatalog;
        this.userAccount = userAccount;
        this.financeAccountDirectory = financeAccountDirectory;
        this.enterprise = enterprise;
        populateTable();
        checkOutJPanel.setVisible(false);
    }

    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) cartJTable.getModel();
        model.setRowCount(0);
        for(OrderItem orderItem : order.getOrders()) {
            Object[] row = new Object[3];
            row[0] = orderItem.getProduct();
            row[1] = orderItem.getQuantity();
            row[2] = orderItem.getAmount();
            model.addRow(row);
        }
        if(model.getRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "Your cart is empty", "Invalid Option", JOptionPane.WARNING_MESSAGE);
            checkoutJButton.setVisible(false);
        }
    }
    
    private void back() {
        
        container.remove(this);
        CardLayout layout = (CardLayout) container.getLayout();
        layout.previous(container);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        cartJTable = new javax.swing.JTable();
        checkoutJButton = new javax.swing.JButton();
        backJButton5 = new javax.swing.JButton();
        checkOutJPanel = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        cardNumberJTextField = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        expirationMonthJTextField = new javax.swing.JTextField();
        expirationYearJTextField = new javax.swing.JTextField();
        confirmJButton = new javax.swing.JButton();
        cvvJTextField = new javax.swing.JTextField();

        cartJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product", "Quantity", "Amount"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(cartJTable);
        if (cartJTable.getColumnModel().getColumnCount() > 0) {
            cartJTable.getColumnModel().getColumn(0).setResizable(false);
            cartJTable.getColumnModel().getColumn(1).setResizable(false);
            cartJTable.getColumnModel().getColumn(2).setResizable(false);
        }

        checkoutJButton.setText("CheckOut");
        checkoutJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkoutJButtonActionPerformed(evt);
            }
        });

        backJButton5.setText("Back");
        backJButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backJButton5ActionPerformed(evt);
            }
        });

        checkOutJPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        jLabel11.setText("Valid Thru");

        jLabel12.setText("cvv");

        jLabel13.setText("Card No.");

        jLabel14.setText("/");

        confirmJButton.setText("Confirm");
        confirmJButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmJButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout checkOutJPanelLayout = new javax.swing.GroupLayout(checkOutJPanel);
        checkOutJPanel.setLayout(checkOutJPanelLayout);
        checkOutJPanelLayout.setHorizontalGroup(
            checkOutJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(checkOutJPanelLayout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addGroup(checkOutJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(checkOutJPanelLayout.createSequentialGroup()
                        .addGroup(checkOutJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(checkOutJPanelLayout.createSequentialGroup()
                                .addComponent(jLabel12)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cvvJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(19, 19, 19))
                            .addGroup(checkOutJPanelLayout.createSequentialGroup()
                                .addGroup(checkOutJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(confirmJButton)
                                    .addGroup(checkOutJPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel11)
                                        .addGap(18, 18, 18)
                                        .addComponent(expirationMonthJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel14)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(expirationYearJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(checkOutJPanelLayout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addGap(18, 18, 18)
                        .addComponent(cardNumberJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39))))
        );
        checkOutJPanelLayout.setVerticalGroup(
            checkOutJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(checkOutJPanelLayout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(checkOutJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(cardNumberJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(checkOutJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(cvvJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(checkOutJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(jLabel14)
                    .addComponent(expirationMonthJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(expirationYearJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(confirmJButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(backJButton5))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(112, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(checkOutJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 295, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(checkoutJButton)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(277, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(backJButton5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(checkoutJButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addComponent(checkOutJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void checkoutJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkoutJButtonActionPerformed
        // TODO add your handling code here:
        checkOutJPanel.setVisible(true);
    }//GEN-LAST:event_checkoutJButtonActionPerformed

    private void backJButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backJButton5ActionPerformed
        // TODO add your handling code here:
        container.remove(this);
        CardLayout layout = (CardLayout) container.getLayout();
        layout.previous(container);
    }//GEN-LAST:event_backJButton5ActionPerformed

    private void confirmJButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmJButtonActionPerformed
        // TODO add your handling code here:
        if(cardNumberJTextField.getText().equals("") || cvvJTextField.getText().equals("") || expirationMonthJTextField.getText().equals("") || expirationYearJTextField.getText().equals("")) {
           JOptionPane.showMessageDialog(null, "Please fill all the fields", "Empty Text", JOptionPane.WARNING_MESSAGE);
            return;
        }
        for(FinanceAccount financeAccount : financeAccountDirectory.getFinanceAccountList()) {
            if(userAccount.getUsername().equals(financeAccount.getUsername())) {
                if(!financeAccount.getCardNo().equals(cardNumberJTextField.getText()) || !financeAccount.getCvv().equals(cvvJTextField.getText()) || financeAccount.getExpirationMonth() != Integer.parseInt(expirationMonthJTextField.getText()) || financeAccount.getExpirationYear() != Integer.parseInt(expirationYearJTextField.getText())) {
                    JOptionPane.showMessageDialog(null, "Please check all the payment fields", "Payments Credentials doesn't match", JOptionPane.WARNING_MESSAGE);
                    return;
                }
            }
        }
        
        Float amount = Float.intBitsToFloat(0);
        for(OrderItem orderItem : order.getOrders()) {
            if(orderItem.getStatus().equals("Pending")) {
                amount = amount + orderItem.getAmount();
            }
        }
        for(FinanceAccount financeAccount : financeAccountDirectory.getFinanceAccountList()) {
                    if(financeAccount.getUsername().equals(userAccount.getUsername())) {
                        if(financeAccount.getBalance() < amount) {
                            JOptionPane.showMessageDialog(null, "You don't have enough balance", "Invalid Option", JOptionPane.WARNING_MESSAGE);
                            return;
                        }
                    }
        }
        if(flag) {
            for(OrderItem orderItem : order.getOrders()) {
                if(orderItem.getStatus().equals("Pending")) {
                    for(FinanceAccount financeAccount : financeAccountDirectory.getFinanceAccountList()) {
                        if(financeAccount.getUsername().equals(orderItem.getBuyer())) {
                            financeAccount.setBalance(financeAccount.getBalance() - orderItem.getAmount());
                            orderItem.setStatus("Paid");
                            flag = false;
                        }
                        for(Network network : enterprise.getNetworkDirectory().getNetworkList()) {
                            for(Organization organization : network.getOrganizationDirectory().getOrganizationList()) {
                                if(organization instanceof SupplierOrganization) {
                                    SupplierOrganization supplierOrganization = (SupplierOrganization) organization;
                                    for(FinanceAccount financeAccount1 : supplierOrganization.getFinancialAccountDirectory().getFinanceAccountList()) {
                                        if(financeAccount1.getUsername().equals(orderItem.getSeller())) {
                                            float amount1 = orderItem.getAmount();
                                            financeAccount1.setBalance(financeAccount1.getBalance() + amount1);
                                        }
                                    }
                                }
                            }
                    }
                }
            }
        }
        }
        if(!flag) {
            JOptionPane.showMessageDialog(null, "Your order is paid", "Invalid Option", JOptionPane.WARNING_MESSAGE);
            checkOutJPanel.setVisible(false);
            checkoutJButton.setVisible(false);
        }
        masterOrderCatalog.addOrder(order);
    }//GEN-LAST:event_confirmJButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backJButton5;
    private javax.swing.JTextField cardNumberJTextField;
    private javax.swing.JTable cartJTable;
    private javax.swing.JPanel checkOutJPanel;
    private javax.swing.JButton checkoutJButton;
    private javax.swing.JButton confirmJButton;
    private javax.swing.JTextField cvvJTextField;
    private javax.swing.JTextField expirationMonthJTextField;
    private javax.swing.JTextField expirationYearJTextField;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
